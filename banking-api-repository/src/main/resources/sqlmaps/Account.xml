<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Account">

    <!-- Result maps describe the mapping between the columns returned
   from a query, and the class properties.  A result map isn't
   necessary if the columns (or aliases) match to the properties
   exactly. -->
    <resultMap id="AccountResult" type="Account">
        <result property="accountID" column="ID"/>
        <result property="accountNumber" column="NUMBER"/>
        <result property="accountType" column="TYPE"
                javaType="com.epam.boot.api.banking.domain.aggregate.Account$AccountTypeEnum"
                typeHandler="org.apache.ibatis.type.EnumTypeHandler"/>
        <result property="IBAN" column="IBAN"/>
        <result property="createdAt" column="CREATE_TIME" javaType="java.time.OffsetDateTime" typeHandler="org.apache.ibatis.type.OffsetDateTimeTypeHandler"/>
    </resultMap>

    <!-- Select with no parameters using the result map for Account class. -->
    <select id="selectAllAccounts" resultMap="AccountResult">
        select * from ACCOUNT order by ID
    </select>

    <!-- A simpler select example without the result map.  Note the
aliases to match the properties of the target result class. -->
    <select id="selectAccountById" parameterType="java.lang.String" resultType="Account">
        select
            ID as accountID,
            TYPE as accountType,
            NUMBER as accountNumber,
            IBAN as IBAN
        from ACCOUNT
        where ID = #{id}
    </select>

    <!-- Insert example, using the Account parameter class -->
    <insert id="insertAccount" parameterType="Account">
        insert into ACCOUNT (
            ID,
            TYPE,
            NUMBER,
            IBAN
        )
        values (
                   #{accountID}, #{accountType}, #{accountNumber}, #{IBAN}
               )
    </insert>

    <!-- START SNIPPET: insertList -->
    <!-- Batch Insert example, using the Account parameter class -->
    <insert id="batchInsertAccount" parameterType="java.util.List">
        insert into ACCOUNT (
        ACC_ID,
        ACC_FIRST_NAME,
        ACC_LAST_NAME,
        ACC_EMAIL
        )
        values (
        <foreach item="Account" collection="list" open="" close="" separator="),(">
            #{Account.id}, #{Account.firstName}, #{Account.lastName}, #{Account.emailAddress}
        </foreach>
        )
    </insert>
    <!-- END SNIPPET: insertList -->

    <!-- Update example, using the Account parameter class -->
    <update id="updateAccount" parameterType="Account">
        update ACCOUNT set
                           ACC_FIRST_NAME = #{firstName},
                           ACC_LAST_NAME = #{lastName},
                           ACC_EMAIL = #{emailAddress}
        where
            ACC_ID = #{id}
    </update>

    <update id="batchUpdateAccount" parameterType="java.util.Map">
        update ACCOUNT set
        ACC_EMAIL = #{emailAddress}
        where
        ACC_ID in
        <foreach item="Account" collection="list" open="(" close=")" separator=",">
            #{Account.id}
        </foreach>
    </update>

    <!-- Delete example, using an integer as the parameter class -->
    <delete id="deleteAccountById" parameterType="java.lang.String">
        delete from ACCOUNT where ID = #{id}
    </delete>

    <delete id="batchDeleteAccountById" parameterType="java.util.List">
        delete from ACCOUNT
        where
        ACC_ID in
        <foreach item="AccountID" collection="list" open="(" close=")" separator=",">
            #{AccountID}
        </foreach>
    </delete>

    <!-- START SNIPPET: e1 -->
    <select id="selectUnprocessedAccounts" resultMap="AccountResult">
        select * from ACCOUNT where PROCESSED = false
    </select>
    <!-- END SNIPPET: e1 -->

    <select id="selectProcessedAccounts" resultMap="AccountResult">
        select * from ACCOUNT where PROCESSED = true
    </select>

    <!-- START SNIPPET: e2 -->
    <update id="consumeAccount" parameterType="Account">
        update ACCOUNT set PROCESSED = true where ACC_ID = #{id}
    </update>
    <!-- END SNIPPET: e2 -->

    <select id="count" resultType="int">
        select count(*) from ACCOUNT
    </select>

</mapper>